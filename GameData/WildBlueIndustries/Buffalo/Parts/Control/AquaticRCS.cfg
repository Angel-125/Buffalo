PART
{
// this is a sample config file, for determining a good file format for defining part parameters
// comment line - ignored by cfg parser
// empty lines, or lines without a '=' sign are also ignored
// all other lines are split at the '=' sign, and the left operand is used to know what parameter we are setting
// diferent parameters require data in different formats (see docs), and each module has it's own parameters (again, see docs)
// each assignment must be in a single line. Lines without assignments will be ignored. (You CAN turn on word wrap, though)
// each keyword here relates to an existing variable in the assigned module. If the keyword isn't found, it is ignored.
// conversely, if a keyword is left unassigned (as in not in the file), it will be initialized with it's default value
// This is done automatically, so any public variable defined in the loaded module can be accessed this way (provided it's value can be parsed)


	// --- general parameters ---
	name = wbiAquaticRCS
	module = Part
	author = Michael Billard (Angel-125)

	// --- asset parameters ---
	rescaleFactor = 1

	MODEL
	{
		model = WildBlueIndustries/Buffalo/Assets/AquaticRCS
	}


	// --- node definitions ---
	// definition format is Position X, Position Y, Position Z, Up X, Up Y, Up Z
	node_attach = 0.0, 0, 0.0, 0.0, -1.0, 0.0, 0

	// --- editor parameters ---
	TechRequired = precisionPropulsion
	entryCost = 2400
	cost = 300
	category = Control
	subcategory = 0
	title = Aquatic RCS Thruster
	manufacturer = Wild Blue Industries
	description = Specially designed for aquatic operations, this RCS thruster can help precisely position your submarines.

	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 0,1,0,1,1

	// --- standard part parameters ---
	mass = 0.025
	dragModelType = default
	maximum_drag = 0.001
	minimum_drag = 0.001
	angularDrag = 2
	crashTolerance = 15
	maxTemp = 1500
	PhysicsSignificance = 1
	bulkheadProfiles = srf

	//NOTE: WBIAquaticRCS fills the part's IntakeLqd reserves WITHOUT using ModuleResourceIntake.
	//Why? Because ModuleResourceIntake will fill all the containers throughtout the vessel, and that's
	//not good for our ballast tanks. So just like WBIBallastTank, WBIAquaticRCS takes care of
	//filling the IntakeLqd resource.
	MODULE
	{
		name = WBIAquaticRCS
		stagingEnabled = False
		thrusterTransformName = rcsThruster
		intakeTransformName = intakeTransform
		thrusterPower = 5
		runningEffectName = running

		PROPELLANT
		{
			name = ElectricCharge
			ratio = 1.0
			DrawGauge = True
			minResToLeave = 1.0
			resourceFlowMode = ALL_VESSEL
		}

		PROPELLANT
		{
			name = IntakeLqd
			ratio = 1.0
			DrawGauge = True
			ignoreForIsp = false
			resourceFlowMode = NO_FLOW
		}

		atmosphereCurve
		{
			key = 0 55
			key = 1 55
		}
	}

	EFFECTS
	{
		running
		{
			AUDIO_MULTI
			{
				channel = Ship
				transformName = rcsFX
				clip = WildBlueIndustries/000WildBlueTools/FX/BabblingBrook
				volume = 0.0 0.0
				volume = 1.0 1.0
				pitch = 0.0 0.0
				pitch = 1.0 1.0
				loop = true
			}
			MODEL_MULTI_PARTICLE
			{
				modelName = WildBlueIndustries/Buffalo/FX/AquaticRCSExhaust
				transformName = rcsFX
				emission = 0.0 0.0
				emission = 1.0 1.0
				speed = 0.0 0.0
				speed = 1.0 1.0
			}
		}		
	}

	RESOURCE
	{
		name = IntakeLqd
		amount = 0
		maxAmount = 1
	}

}//End of part
