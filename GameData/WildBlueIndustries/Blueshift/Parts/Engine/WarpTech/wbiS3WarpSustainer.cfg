PART
{
	name = wbiS3WarpSustainer
	module = Part
	author = Angel-125

	MODEL
	{
		model = WildBlueIndustries/Blueshift/Parts/Engine/WarpTech/s3WarpSustainer
	}

	rescaleFactor = 1

	node_stack_top = 0.0, 1.40625, 0.0, 0.0, 1.0, 0.0, 3
	node_stack_bottom = 0.0, -1.40625, 0.0, 0.0, -1.0, 0.0, 3

	TechRequired:NEEDS[WildBlueIndustries/FlyingSaucers] = wbiAdvAlienEngineering
	TechRequired:NEEDS[!WildBlueIndustries/FlyingSaucers&CommunityTechTree] = unifiedFieldTheory
	TechRequired:NEEDS[!WildBlueIndustries/FlyingSaucers&!CommunityTechTree] = wbiWarpTech

	category = Engine
	subcategory = 0
	entryCost = 1500000
	cost = 300000

	title = S-3 Warp Sustainer
	manufacturer = <CLASSIFIED>
	description = The S-3 Warp Sustainer produces additional Warp Capacity that enables more massive vessels to travel faster than light and/or smaller vessels to go even faster. Instead of relying on parts salvaged from [REDACTED], it uses kerbal-tech to achieve its capabilities.
	attachRules = 1,0,1,1,0
	mass = 11.75
	dragModelType = none
	maximum_drag = 0.02
	minimum_drag = 0.02
	angularDrag = 0.2
	stackSymmetry = 1
	crashTolerance = 20
	thermalMassModifier = 8.0
	emissiveConstant = 0.95
	maxTemp = 2000
	explosionPotential = 0.1
	fuelCrossFeed = True
	breakingForce = 500000
	breakingTorque = 500000
	bulkheadProfiles = size3

	// Graviolium is normally not a tweakable resource, meaning you have to fill up your tanks while in flight.
	// Without Kerbal Flying Saucers, the only way to get the resource is to mine asteroids.
	// But this cheat lets you tweak the resource in the editor.
	MODULE
	{
		name = WBIResourceTweaker
		resourceName = Graviolium
		tweakEnabledName = CHEAT: Enable Graviolium tweak
		tweakDisabledName = CHEAT: Disable Graviolium tweak
	}

	MODULE
	{
		name = WBIAnimatedTexture
//		debugMode = true

		// ID of the module so we can distinguish between several animated textures in one part.
		// This one is controlled by the warp coil.
		moduleID = WarpCoil

		textureTransformName = warpCoilPlasma
		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpPlasma
		minFramesPerSecond = 15
		maxFramesPerSecond = 50
		fadesAtMinThrottle = true
		emissiveFadeTime = 0.5
	}

	MODULE
	{
		name = WBIAnimatedTexture

		// ID of the module so we can distinguish between several animated textures in one part.
		// This one is controlled by the warp coil.
		moduleID = FusionTorus

		textureTransformName = fusionTorus
		animatedEmissiveTexture = WildBlueIndustries/Blueshift/Parts/Engine/WarpPlasma
		minFramesPerSecond = 50
		maxFramesPerSecond = 50
		emissiveFadeTime = 0.5
	}

	// Generators are just like the stock resource converter, except that this one can control animated textures and/or Effects.
	// This generator produces the GravityWaves that power warp coils by consuming Graviolium and FusionPellets.
	MODULE
	{
		name = WBIModuleGeneratorFX
//		debugMode = true

		// Setting this to the same value as WBIWarpEngine's warpPowerGeneratorID field lets the warp engine control the generator.
		moduleID = warpPower

		// This also replaces the name shown in the editor.
		ConverterName = Coil Power

		// Short description of the module as displayed in the editor.
		moduleDescription = Provides power for the warp coil.

		// Generators tagged as WarpCoil will receive throttle updates from warp engines.
		// If the generator controls effects and/or animated textures, then they'll be affected by the throttle updates.
//		moduleID = WarpCoil

		StartActionName = Activate Auxiliary Power
		StopActionName = Deactivate Auxiliary Power
		ToggleActionName = Toggle Auxiliary Power

		// Generators can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		textureModuleID = FusionTorus

		// Generators can control effects too
//		startEffect = effectStart
//		stopEffect = effectStop
		runningEffect = running

		INPUT_RESOURCE
		{
			ResourceName = Graviolium
			Ratio = 0.006
			FlowMode = STAGE_PRIORITY_FLOW
		}
		INPUT_RESOURCE
		{
			ResourceName = FusionPellets
			Ratio = 0.00015
			FlowMode = STAGE_PRIORITY_FLOW
		}
		OUTPUT_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 150
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectroPlasma
			Ratio = 2250
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE
		{
			ResourceName = ElectricCharge
			Ratio = 9
			DumpExcess = true
			FlowMode = ALL_VESSEL
		}
		OUTPUT_RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
		{
			ResourceName = StaticCharge
			Ratio = 0.006
			DumpExcess = false
			FlowMode = ALL_VESSEL
		}
		DRAINED_RESOURCE
		{
			ResourceName = GravityWaves
			Ratio = 15
		}
	}

	// Warp Coils are simple part modules that don't need the full functionality of a resource converter just to generate warp capacity.
	// Instead, they specify the warp capacity pseudo-resource and the vessel resources needed to produce it.
	// Warp engines themselves will tally up a vessel's total warp capacity and resources needed to generate warp capacity, and
	// handle the resource requests itself. The result is faster game performance.
	MODULE
	{
		name = WBIWarpCoil
//		debugMode = true

		// Warp Coils can control animated textures
		// Hint: You can control multiple animated textures in the same part if they share the same moduleID.
		textureModuleID = WarpCoil

		// Warp coils can control a running effect too.
//		runningEffect =

		// Name of the waterfall effect controller
		waterfallEffectController = ringPlumeController

		// How much warp capacity can the coil produce?
		warpCapacity = 7.5

		// Warp coils, like engines, can efficiently move a certain amount of mass to light speed and beyond without penalties.
		// Going over this limit incurs performance penalties, but staying under this value provides benefits.
		// Smaller coils can move smaller ships efficiently, but it takes more of them to move a bigger ship at the same efficiency as
		// a bigger coil.
		// The displacement value is rated in metric tons.
		displacementImpulse = 100

		// What resources are consumed to produce the warp capacity.
		RESOURCE
		{
			name = GravityWaves
			rate = 150
			FlowMode = STAGE_PRIORITY_FLOW
		}	
	}

MODULE:NEEDS[Waterfall]
{
	name = ModuleWaterfallFX
	engineID = 
	CONTROLLER
	{
		name = ringPlumeController
		linkedTo = custom
	}
	EFFECT
	{
		name = ringPlume
		parentName = s3WarpSustainer
		MODEL
		{
			path = Waterfall/FX/fx-cylinder
			positionOffset = 0,0,0
			rotationOffset = 90,0,0
			scaleOffset = 5,30,5
			MATERIAL
			{
				transform = Cylinder
				shader = Waterfall/Additive Directional
				TEXTURE
				{
					textureSlotName = _MainTex
					texturePath = Waterfall/FX/fx-noise-3
					textureScale = 1,1
					textureOffset = 0,0
				}
				COLOR
				{
					colorName = _StartTint
					colorValue = 0.678431392,0.784313738,0.992156863,1
				}
				COLOR
				{
					colorName = _EndTint
					colorValue = 1,1,1,1
				}
				FLOAT
				{
					floatName = _Noise
					value = 2.25
				}
				FLOAT
				{
					floatName = _Brightness
					value = 2.5999999
				}
				FLOAT
				{
					floatName = _SpeedY
					value = 5
				}
				FLOAT
				{
					floatName = _Falloff
					value = 1.29999995
				}
				FLOAT
				{
					floatName = _Fresnel
					value = 1
				}
				FLOAT
				{
					floatName = _FresnelInvert
					value = 1.54999995
				}
			}
		}
		FLOATMODIFIER
		{
			name = plumeSpeed
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _SpeedY
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 3 0 0
				key = 0.5 4 0 0
				key = 1 5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeAlpha
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Brightness
			floatCurve
			{
				key = 0 0 0 0
				key = 0.1 1.25 0 0
				key = 0.25 1.5 0 0
				key = 0.5 2.5 0 0
				key = 1 2.5 0 0
			}
		}
		FLOATMODIFIER
		{
			name = plumeFresnel
			controllerName = ringPlumeController
			transformName = Cylinder
			combinationType = REPLACE
			useRandomness = False
			randomnessController = random
			randomnessScale = 1
			floatName = _Fresnel
			floatCurve
			{
				key = 0 5 0 0
				key = 0.1 1.3 0 0
				key = 0.25 1.3 0 0
				key = 0.5 1.3 0 0
				key = 1 1.3 0 0
			}
		}
	}
}
// Waterfall end

	RESOURCE
	{
		name = FusionPellets
		amount = 50
		maxAmount = 50
	}

	RESOURCE
	{
		name = FusionPellets
		amount = 96
		maxAmount = 96
	}

	RESOURCE
	{
		name = Graviolium
		amount = 0
		maxAmount = 640
	}

	RESOURCE:NEEDS[WildBlueIndustries/FlyingSaucers]
	{
		name = StaticCharge
		amount = 0
		maxAmount = 300
	}

	EFFECTS
	{	
		running
		{
			AUDIO
			{
				channel = Ship
				clip = WildBlueIndustries/Blueshift/FX/FusionReactorRunning
				volume = 0.0 0.0
				volume = 0.05 0.5
				volume = 1.0 0.5
				pitch = 0.0 0.0
				pitch = 0.05 0.5
				pitch = 1.0 0.6
				loop = true
			}
		}
	}
}
